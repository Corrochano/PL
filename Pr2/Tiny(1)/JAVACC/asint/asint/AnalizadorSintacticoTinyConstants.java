/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTinyConstants.java */
package asint;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalizadorSintacticoTinyConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int letra = 1;
  /** RegularExpression Id. */
  int digitoPositivo = 2;
  /** RegularExpression Id. */
  int digito = 3;
  /** RegularExpression Id. */
  int parteEntera = 4;
  /** RegularExpression Id. */
  int parteDecimal = 5;
  /** RegularExpression Id. */
  int parteExponencial = 6;
  /** RegularExpression Id. */
  int cadena = 9;
  /** RegularExpression Id. */
  int numEnt = 10;
  /** RegularExpression Id. */
  int numReal = 11;
  /** RegularExpression Id. */
  int var = 12;
  /** RegularExpression Id. */
  int type = 13;
  /** RegularExpression Id. */
  int proc = 14;
  /** RegularExpression Id. */
  int ent = 15;
  /** RegularExpression Id. */
  int real = 16;
  /** RegularExpression Id. */
  int bool = 17;
  /** RegularExpression Id. */
  int string = 18;
  /** RegularExpression Id. */
  int array = 19;
  /** RegularExpression Id. */
  int of = 20;
  /** RegularExpression Id. */
  int record = 21;
  /** RegularExpression Id. */
  int pointer = 22;
  /** RegularExpression Id. */
  int iif = 23;
  /** RegularExpression Id. */
  int eelse = 24;
  /** RegularExpression Id. */
  int then = 25;
  /** RegularExpression Id. */
  int endif = 26;
  /** RegularExpression Id. */
  int wwhile = 27;
  /** RegularExpression Id. */
  int ddo = 28;
  /** RegularExpression Id. */
  int endwhile = 29;
  /** RegularExpression Id. */
  int read = 30;
  /** RegularExpression Id. */
  int write = 31;
  /** RegularExpression Id. */
  int nl = 32;
  /** RegularExpression Id. */
  int nnew = 33;
  /** RegularExpression Id. */
  int delete = 34;
  /** RegularExpression Id. */
  int call = 35;
  /** RegularExpression Id. */
  int and = 36;
  /** RegularExpression Id. */
  int or = 37;
  /** RegularExpression Id. */
  int not = 38;
  /** RegularExpression Id. */
  int ttrue = 39;
  /** RegularExpression Id. */
  int ffalse = 40;
  /** RegularExpression Id. */
  int nnull = 41;
  /** RegularExpression Id. */
  int ident = 42;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<letra>",
    "<digitoPositivo>",
    "<digito>",
    "<parteEntera>",
    "<parteDecimal>",
    "<parteExponencial>",
    "<token of kind 7>",
    "<token of kind 8>",
    "<cadena>",
    "<numEnt>",
    "<numReal>",
    "\"var\"",
    "\"type\"",
    "\"proc\"",
    "\"int\"",
    "\"real\"",
    "\"bool\"",
    "\"string\"",
    "\"array\"",
    "\"of\"",
    "\"record\"",
    "\"pointer\"",
    "\"if\"",
    "\"else\"",
    "\"then\"",
    "\"endif\"",
    "\"while\"",
    "\"do\"",
    "\"endwhile\"",
    "\"read\"",
    "\"write\"",
    "\"nl\"",
    "\"new\"",
    "\"delete\"",
    "\"call\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "<ident>",
    "\"&&\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"&\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"=\"",
    "\"->\"",
    "\"+\"",
    "\"-\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"/\"",
    "\"*\"",
    "\"%\"",
    "\".\"",
  };

}
