options  {
  STATIC=false;
}  
PARSER_BEGIN(AnalizadorSintacticoTiny)
package asint;

public class AnalizadorSintacticoTiny {}
PARSER_END(AnalizadorSintacticoTiny)
  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 
  TOKEN:{<#parteEntera:<digitoPositivo> (<digito>)* |"0">} 
  TOKEN:{<#parteDecimal: (<digito>)* <digitoPositivo>>}
  TOKEN:{<#parteExponencial: (["e","E"]) <parteEntera>>}
  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"#"(~["\n"])*>}  
  TOKEN:{ <cadena: "\"" (~["\"","\r","\b","\n"])* "\"" >}
  
  TOKEN:{<numEnt: (["+","-"])? <parteEntera> >}
  TOKEN:{<numReal: (["+","-"])? <parteEntera> (("." <parteDecimal> | <parteExponencial>) | "." <parteDecimal> <parteExponencial> )>  }



  TOKEN: {<var:"var">}
  TOKEN: {<type:"type">}
  TOKEN: {<proc:"proc">}
  TOKEN: {<ent:"int">}
  TOKEN: {<real:"real">}
  TOKEN: {<bool:"bool">}
  TOKEN: {<string:"string">}
  TOKEN: {<array:"array">}
  TOKEN: {<of:"of">}
  TOKEN: {<record:"record">}
  TOKEN: {<pointer:"pointer">}
  TOKEN: {<iif:"if">}
  TOKEN: {<eelse:"else">}
  TOKEN: {<then:"then">}
  TOKEN: {<endif:"endif">}
  TOKEN: {<wwhile:"while">}
  TOKEN: {<ddo:"do">}
  TOKEN: {<endwhile:"endwhile">}
  TOKEN: {<read:"read">}
  TOKEN: {<write:"write">}
  TOKEN: {<nl:"nl">}
  TOKEN: {<nnew:"new">}
  TOKEN: {<delete:"delete">}
  TOKEN: {<call:"call">}
  TOKEN: {<and:"and">}
  TOKEN: {<or:"or">}
  TOKEN: {<not:"not">}
  TOKEN: {<ttrue:"true">}
  TOKEN: {<ffalse:"false">}

  TOKEN:{<ident:<letra>(<letra>|<digito>|"_")*>}
  
void Sp()               : {} {S() <EOF>}
void S()                : {} { D0() "&&" I0() | I0() }
void D0()               : {} { D1() D0_1() }
void D0_1()             : {} { ";" D1() D0_1() | {}}
void D1()               : {} { DV0() | DT0() | DP0() }
void DV0()              : {} { <var> T0() <ident> }
void DT0()              : {} { <type> T0() <ident> }
void DP0()              : {} { <proc> <ident> "(" PFS0() ")" B0() }
void PFS0()             : {} { PF1() PFS0_1() }
void PFS0_1()           : {} { "," PF1() PFS0_1() | {}}
void PF1()              : {} { T0() FT0() }
void FT0()              : {} { <ident> | "&" <ident> }
void B0()               : {} { "{" Flap() }
void Flap()             : {} { S() "}" | "}" }
void T0()               : {} { TB0() | <ident> | TA0() | TR0() | TP0() }
void TB0()              : {} { <ent> | <real> | <bool> | <string> }
void TA0()              : {} { <array> "[" <numEnt> "]" <of> T0() }
void TR0()              : {} { <record> "{" C0() "}" }
void C0()               : {} { C1() C0_1() }
void C0_1()             : {} { ";" C1() C0_1() | {}}
void C1()               : {} { T0() <ident> }
void TP0()              : {} { <pointer> T0() }
void I0()               : {} { I1() I0_1() }
void I0_1()             : {} { ";" I1() I0_1() | {}}
void I1()               : {} { IA0()  | <iif> Fif_2() | IW0() | IL0() | IE0() | INL0() | IRM0() | ILM0() | IIP0() | IC0() }
void Fif_2()            : {} { E0() FE0_3() }
void FE0_3()            : {} { <then> Fthen_2() }
void Fthen_2()          : {} { <endif> | I0() FI0_1() | <eelse> Felse() }
void FI0_1()            : {} { <endif> | FI0() }
void IA0()              : {} { E0() "=" E0() }
void IIT0()             : {} { <iif> Fif() }
void Fif()              : {} { E0() FE0() }
void FE0()              : {} { <then> Fthen() }
void Fthen()            : {} { <endif> | I0() <endif> }
void IITE0()            : {} { <iif> Fif_1() }
void Fif_1()            : {} { E0() FE0_1() }
void FE0_1()            : {} { <then> Fthen_1() }
void Fthen_1()          : {} { <eelse> Felse() | I0() FI0() }
void Felse()            : {} { <endif> | I0() <endif> }
void FI0()              : {} { <eelse> Felse_1() }
void Felse_1()          : {} { <endif> | I0() <endif>  }
void IW0()              : {} { <wwhile> Fwhile()  }
void Fwhile()           : {} { E0() FE0_2()  }
void FE0_2()            : {} { <ddo> Fdo()  }
void Fdo()              : {} { <endwhile> | I0() <endwhile> }
void IL0()              : {} { <read> E0()  }
void IE0()              : {} { <write> E0()  }
void INL0()             : {} { <nl>  }
void IRM0()             : {} { <nnew> E0()  }
void ILM0()             : {} { <delete> E0()  }
void IIP0()             : {} { <call> Fcall()  }
void Fcall()            : {} { <ident> Fident()  }
void Fident()           : {} { "(" Fpap()  }
void Fpap()             : {} { PR0() ")" | ")"  }
void PR0()              : {} { PR1() PR0_1()  }
void PR0_1()            : {} { "," PR1() PR0_1() | PR1() "->" E0()  }
void PR1()              : {} { E0() }
void IC0()              : {} { B0()  }
void E0()               : {} { E1() FE1() }
void FE1()              : {} { "+" E0()  | "-" E1() | {}}
void E1()               : {} { E2() E1_1() }
void E1_1()             : {} { <and> E2() E1_1() | <or> E2() E1_1() | {}}
void E2()               : {} { E3() E2_1() }
void E2_1()             : {} { "<" E3() E2_1() | "<=" E3() E2_1() | ">" E3() E2_1() | ">=" E3() E2_1() | "==" E3() E2_1() | "!=" E3() E2_1() | {}}
void E3()               : {} { E4() FE4() }
void FE4()              : {} { "/" E4() | "*" E4() | "%" E4() | {}}
void E4()               : {} { "-" E5()  | <not> E4() | E5()  }
void E5()               : {} { E6() E5_1()  }
void E5_1()             : {} { "[" E0() "]" E5_1() | "." <ident> E5_1() | "->" <ident> E5_1() | {}}
void E6()               : {} { E7() E6_1()  }
void E6_1()             : {} { "*" E6_1() | {}}
void E7()               : {} { <numReal>  | <numEnt> | <cadena> | <ident> | <ttrue> | <ffalse> | "(" E0() ")" }
  
  