
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Mar 27 13:36:05 CEST 2022
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Mar 27 13:36:05 CEST 2022
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\005\000" +
    "\002\006\005\000\002\007\010\000\002\007\007\000\002" +
    "\010\005\000\002\010\003\000\002\011\004\000\002\011" +
    "\005\000\002\040\005\000\002\040\004\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\010\000\002\014" +
    "\006\000\002\015\005\000\002\015\003\000\002\016\004" +
    "\000\002\017\004\000\002\026\005\000\002\026\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\022\005\000\002\023\006\000" +
    "\002\023\007\000\002\024\007\000\002\024\010\000\002" +
    "\024\010\000\002\024\011\000\002\025\006\000\002\025" +
    "\007\000\002\027\004\000\002\030\004\000\002\031\003" +
    "\000\002\032\004\000\002\033\004\000\002\034\007\000" +
    "\002\034\006\000\002\035\005\000\002\035\003\000\002" +
    "\036\003\000\002\037\003\000\002\050\005\000\002\050" +
    "\005\000\002\050\003\000\002\041\005\000\002\041\005" +
    "\000\002\041\003\000\002\042\005\000\002\042\005\000" +
    "\002\042\005\000\002\042\005\000\002\042\005\000\002" +
    "\042\005\000\002\042\003\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\003\000\002\044\004" +
    "\000\002\044\004\000\002\044\003\000\002\045\006\000" +
    "\002\045\005\000\002\045\005\000\002\045\003\000\002" +
    "\046\004\000\002\046\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\054\004\015\006\037\010\004\020\017\027" +
    "\043\030\042\033\062\034\034\035\021\036\051\041\006" +
    "\051\032\055\023\061\046\064\045\065\014\066\044\067" +
    "\027\070\013\071\022\076\030\001\002\000\074\002\uffa1" +
    "\007\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\031\uffa1\037\uffa1\042\uffa1\043\uffa1\044\uffa1\056" +
    "\uffa1\057\uffa1\060\uffa1\062\uffa1\063\uffa1\072\uffa1\073\uffa1" +
    "\074\uffa1\075\uffa1\001\002\000\004\002\261\001\002\000" +
    "\056\004\015\006\037\010\004\020\017\027\043\030\042" +
    "\033\062\034\034\035\021\036\051\041\006\042\257\051" +
    "\032\055\023\061\046\064\045\065\014\066\044\067\027" +
    "\070\013\071\022\076\030\001\002\000\016\002\uffd4\007" +
    "\uffd4\042\uffd4\056\uffd4\060\uffd4\063\uffd4\001\002\000\006" +
    "\007\ufffb\032\ufffb\001\002\000\016\002\uffdc\007\uffdc\042" +
    "\uffdc\056\uffdc\060\uffdc\063\uffdc\001\002\000\016\002\uffda" +
    "\007\uffda\042\uffda\056\uffda\060\uffda\063\uffda\001\002\000" +
    "\024\004\015\006\037\010\004\020\017\027\043\030\042" +
    "\034\034\051\032\076\030\001\002\000\024\004\015\006" +
    "\037\010\004\020\017\027\043\030\042\034\034\051\032" +
    "\076\030\001\002\000\074\002\uffa4\007\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\031\uffa4\037" +
    "\uffa4\042\uffa4\043\uffa4\044\uffa4\056\uffa4\057\uffa4\060\uffa4" +
    "\062\uffa4\063\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\001" +
    "\002\000\006\007\ufffd\032\ufffd\001\002\000\024\004\015" +
    "\006\037\010\004\020\017\027\043\030\042\034\034\051" +
    "\032\076\030\001\002\000\006\007\250\032\247\001\002" +
    "\000\022\005\115\034\114\045\113\046\127\047\122\052" +
    "\117\053\121\054\125\001\002\000\004\034\234\001\002" +
    "\000\024\004\015\006\037\010\004\020\017\027\043\030" +
    "\042\034\034\051\032\076\030\001\002\000\006\007\ufffa" +
    "\032\ufffa\001\002\000\016\002\uffd9\007\uffd9\042\uffd9\056" +
    "\uffd9\060\uffd9\063\uffd9\001\002\000\016\002\uffd6\007\uffd6" +
    "\042\uffd6\056\uffd6\060\uffd6\063\uffd6\001\002\000\024\004" +
    "\015\006\037\010\004\020\017\027\043\030\042\034\034" +
    "\051\032\076\030\001\002\000\074\002\uffa3\007\uffa3\011" +
    "\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\031" +
    "\uffa3\037\uffa3\042\uffa3\043\uffa3\044\uffa3\056\uffa3\057\uffa3" +
    "\060\uffa3\062\uffa3\063\uffa3\072\uffa3\073\uffa3\074\uffa3\075" +
    "\uffa3\001\002\000\006\007\ufffc\032\ufffc\001\002\000\074" +
    "\002\uffa0\007\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015" +
    "\uffa0\016\uffa0\017\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\026\uffa0\031\uffa0\037\uffa0\042\uffa0\043\uffa0\044" +
    "\uffa0\056\uffa0\057\uffa0\060\uffa0\062\uffa0\063\uffa0\072\uffa0" +
    "\073\uffa0\074\uffa0\075\uffa0\001\002\000\016\002\uffdd\007" +
    "\uffdd\042\uffdd\056\uffdd\060\uffdd\063\uffdd\001\002\000\074" +
    "\002\uffa2\007\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015" +
    "\uffa2\016\uffa2\017\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2" +
    "\025\uffa2\026\uffa2\031\uffa2\037\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\056\uffa2\057\uffa2\060\uffa2\062\uffa2\063\uffa2\072\uffa2" +
    "\073\uffa2\074\uffa2\075\uffa2\001\002\000\016\002\uffd8\007" +
    "\uffd8\042\uffd8\056\uffd8\060\uffd8\063\uffd8\001\002\000\016" +
    "\002\uffdb\007\uffdb\042\uffdb\056\uffdb\060\uffdb\063\uffdb\001" +
    "\002\000\074\002\uffa5\007\uffa5\011\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\015\uffa5\016\uffa5\017\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\031\uffa5\037\uffa5\042\uffa5" +
    "\043\uffa5\044\uffa5\056\uffa5\057\uffa5\060\uffa5\062\uffa5\063" +
    "\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\001\002\000\016" +
    "\002\uffdf\007\uffdf\042\uffdf\056\uffdf\060\uffdf\063\uffdf\001" +
    "\002\000\010\002\uffff\007\210\042\uffff\001\002\000\024" +
    "\004\015\006\037\010\004\020\017\027\043\030\042\034" +
    "\034\051\032\076\030\001\002\000\020\004\015\006\037" +
    "\010\004\030\042\034\034\051\032\076\030\001\002\000" +
    "\016\002\uffc8\007\uffc8\042\uffc8\056\uffc8\060\uffc8\063\uffc8" +
    "\001\002\000\024\004\015\006\037\010\004\020\017\027" +
    "\043\030\042\034\034\051\032\076\030\001\002\000\024" +
    "\004\015\006\037\010\004\020\017\027\043\030\042\034" +
    "\034\051\032\076\030\001\002\000\016\002\uffde\007\uffde" +
    "\042\uffde\056\uffde\060\uffde\063\uffde\001\002\000\016\002" +
    "\uffd7\007\uffd7\042\uffd7\056\uffd7\060\uffd7\063\uffd7\001\002" +
    "\000\004\034\165\001\002\000\016\002\uffd5\007\uffd5\042" +
    "\uffd5\056\uffd5\060\uffd5\063\uffd5\001\002\000\074\002\uffa6" +
    "\007\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016" +
    "\uffa6\017\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6" +
    "\026\uffa6\031\uffa6\037\uffa6\042\uffa6\043\uffa6\044\uffa6\056" +
    "\uffa6\057\uffa6\060\uffa6\062\uffa6\063\uffa6\072\uffa6\073\uffa6" +
    "\074\uffa6\075\uffa6\001\002\000\074\002\uffa8\007\uffa8\011" +
    "\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\031" +
    "\uffa8\037\uffa8\042\uffa8\043\uffa8\044\uffa8\056\uffa8\057\uffa8" +
    "\060\uffa8\062\uffa8\063\uffa8\072\uffa8\073\uffa8\074\uffa8\075" +
    "\164\001\002\000\072\002\uffac\007\uffac\011\uffac\012\uffac" +
    "\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\021\uffac\022" +
    "\uffac\023\uffac\024\uffac\025\uffac\026\uffac\031\uffac\037\uffac" +
    "\042\uffac\043\156\044\uffac\056\uffac\057\uffac\060\uffac\062" +
    "\uffac\063\uffac\072\155\073\uffac\074\157\001\002\000\064" +
    "\002\uffaf\007\uffaf\011\uffaf\012\uffaf\013\uffaf\014\151\015" +
    "\150\016\uffaf\017\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\031\uffaf\037\uffaf\042\uffaf\044\uffaf\056" +
    "\uffaf\057\uffaf\060\uffaf\062\uffaf\063\uffaf\073\147\001\002" +
    "\000\056\002\uffb3\007\uffb3\011\uffb3\012\uffb3\013\uffb3\016" +
    "\uffb3\017\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\031\uffb3\037\uffb3\042\uffb3\044\uffb3\056\uffb3\057" +
    "\uffb3\060\uffb3\062\uffb3\063\uffb3\001\002\000\016\002\uffc0" +
    "\007\uffc0\042\uffc0\056\uffc0\060\uffc0\063\uffc0\001\002\000" +
    "\056\002\uffba\007\uffba\011\uffba\012\uffba\013\uffba\016\uffba" +
    "\017\uffba\021\101\022\100\023\075\024\076\025\077\026" +
    "\074\031\uffba\037\uffba\042\uffba\044\uffba\056\uffba\057\uffba" +
    "\060\uffba\062\uffba\063\uffba\001\002\000\022\005\115\034" +
    "\114\045\113\046\127\047\122\052\117\053\121\054\125" +
    "\001\002\000\042\002\uffbd\007\uffbd\011\uffbd\012\067\013" +
    "\071\016\070\017\072\031\uffbd\037\uffbd\042\uffbd\044\uffbd" +
    "\056\uffbd\057\uffbd\060\uffbd\062\uffbd\063\uffbd\001\002\000" +
    "\004\011\065\001\002\000\024\004\015\006\037\010\004" +
    "\020\017\027\043\030\042\034\034\051\032\076\030\001" +
    "\002\000\016\002\uffd3\007\uffd3\042\uffd3\056\uffd3\060\uffd3" +
    "\063\uffd3\001\002\000\024\004\015\006\037\010\004\020" +
    "\017\027\043\030\042\034\034\051\032\076\030\001\002" +
    "\000\024\004\015\006\037\010\004\020\017\027\043\030" +
    "\042\034\034\051\032\076\030\001\002\000\024\004\015" +
    "\006\037\010\004\020\017\027\043\030\042\034\034\051" +
    "\032\076\030\001\002\000\024\004\015\006\037\010\004" +
    "\020\017\027\043\030\042\034\034\051\032\076\030\001" +
    "\002\000\056\002\uffbb\007\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\016\uffbb\017\uffbb\021\101\022\100\023\075\024\076\025" +
    "\077\026\074\031\uffbb\037\uffbb\042\uffbb\044\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\062\uffbb\063\uffbb\001\002\000\024\004" +
    "\015\006\037\010\004\020\017\027\043\030\042\034\034" +
    "\051\032\076\030\001\002\000\024\004\015\006\037\010" +
    "\004\020\017\027\043\030\042\034\034\051\032\076\030" +
    "\001\002\000\024\004\015\006\037\010\004\020\017\027" +
    "\043\030\042\034\034\051\032\076\030\001\002\000\024" +
    "\004\015\006\037\010\004\020\017\027\043\030\042\034" +
    "\034\051\032\076\030\001\002\000\024\004\015\006\037" +
    "\010\004\020\017\027\043\030\042\034\034\051\032\076" +
    "\030\001\002\000\024\004\015\006\037\010\004\020\017" +
    "\027\043\030\042\034\034\051\032\076\030\001\002\000" +
    "\056\002\uffb7\007\uffb7\011\uffb7\012\uffb7\013\uffb7\016\uffb7" +
    "\017\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\031\uffb7\037\uffb7\042\uffb7\044\uffb7\056\uffb7\057\uffb7" +
    "\060\uffb7\062\uffb7\063\uffb7\001\002\000\056\002\uffb9\007" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\016\uffb9\017\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\031\uffb9\037" +
    "\uffb9\042\uffb9\044\uffb9\056\uffb9\057\uffb9\060\uffb9\062\uffb9" +
    "\063\uffb9\001\002\000\056\002\uffb5\007\uffb5\011\uffb5\012" +
    "\uffb5\013\uffb5\016\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\031\uffb5\037\uffb5\042\uffb5\044" +
    "\uffb5\056\uffb5\057\uffb5\060\uffb5\062\uffb5\063\uffb5\001\002" +
    "\000\056\002\uffb8\007\uffb8\011\uffb8\012\uffb8\013\uffb8\016" +
    "\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\031\uffb8\037\uffb8\042\uffb8\044\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\062\uffb8\063\uffb8\001\002\000\056\002\uffb6" +
    "\007\uffb6\011\uffb6\012\uffb6\013\uffb6\016\uffb6\017\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\031\uffb6" +
    "\037\uffb6\042\uffb6\044\uffb6\056\uffb6\057\uffb6\060\uffb6\062" +
    "\uffb6\063\uffb6\001\002\000\056\002\uffb4\007\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\016\uffb4\017\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\031\uffb4\037\uffb4\042\uffb4" +
    "\044\uffb4\056\uffb4\057\uffb4\060\uffb4\062\uffb4\063\uffb4\001" +
    "\002\000\036\002\uffbe\007\uffbe\011\uffbe\016\070\017\072" +
    "\031\uffbe\037\uffbe\042\uffbe\044\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\062\uffbe\063\uffbe\001\002\000\056\002\uffbc\007\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\016\uffbc\017\uffbc\021\101\022" +
    "\100\023\075\024\076\025\077\026\074\031\uffbc\037\uffbc" +
    "\042\uffbc\044\uffbc\056\uffbc\057\uffbc\060\uffbc\062\uffbc\063" +
    "\uffbc\001\002\000\032\002\uffbf\007\uffbf\011\uffbf\031\uffbf" +
    "\037\uffbf\042\uffbf\044\uffbf\056\uffbf\057\uffbf\060\uffbf\062" +
    "\uffbf\063\uffbf\001\002\000\006\034\uffea\040\uffea\001\002" +
    "\000\006\034\uffee\040\uffee\001\002\000\006\034\uffe8\040" +
    "\uffe8\001\002\000\006\034\uffef\040\uffef\001\002\000\004" +
    "\043\142\001\002\000\006\034\uffeb\040\uffeb\001\002\000" +
    "\004\041\132\001\002\000\006\034\uffe7\040\uffe7\001\002" +
    "\000\006\034\uffed\040\uffed\001\002\000\006\034\uffec\040" +
    "\uffec\001\002\000\022\005\115\034\114\045\113\046\127" +
    "\047\122\052\117\053\121\054\125\001\002\000\004\034" +
    "\130\001\002\000\006\034\uffe9\040\uffe9\001\002\000\006" +
    "\007\ufff9\032\ufff9\001\002\000\006\034\uffe1\040\uffe1\001" +
    "\002\000\022\005\115\034\114\045\113\046\127\047\122" +
    "\052\117\053\121\054\125\001\002\000\006\007\uffe3\042" +
    "\uffe3\001\002\000\006\007\140\042\137\001\002\000\004" +
    "\034\136\001\002\000\006\007\uffe2\042\uffe2\001\002\000" +
    "\006\034\uffe5\040\uffe5\001\002\000\022\005\115\034\114" +
    "\045\113\046\127\047\122\052\117\053\121\054\125\001" +
    "\002\000\006\007\uffe4\042\uffe4\001\002\000\004\004\143" +
    "\001\002\000\004\044\144\001\002\000\004\050\145\001" +
    "\002\000\022\005\115\034\114\045\113\046\127\047\122" +
    "\052\117\053\121\054\125\001\002\000\006\034\uffe6\040" +
    "\uffe6\001\002\000\024\004\015\006\037\010\004\020\017" +
    "\027\043\030\042\034\034\051\032\076\030\001\002\000" +
    "\024\004\015\006\037\010\004\020\017\027\043\030\042" +
    "\034\034\051\032\076\030\001\002\000\024\004\015\006" +
    "\037\010\004\020\017\027\043\030\042\034\034\051\032" +
    "\076\030\001\002\000\056\002\uffb1\007\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\016\uffb1\017\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\031\uffb1\037\uffb1\042\uffb1\044" +
    "\uffb1\056\uffb1\057\uffb1\060\uffb1\062\uffb1\063\uffb1\001\002" +
    "\000\056\002\uffb2\007\uffb2\011\uffb2\012\uffb2\013\uffb2\016" +
    "\uffb2\017\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\031\uffb2\037\uffb2\042\uffb2\044\uffb2\056\uffb2\057" +
    "\uffb2\060\uffb2\062\uffb2\063\uffb2\001\002\000\056\002\uffb0" +
    "\007\uffb0\011\uffb0\012\uffb0\013\uffb0\016\uffb0\017\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\031\uffb0" +
    "\037\uffb0\042\uffb0\044\uffb0\056\uffb0\057\uffb0\060\uffb0\062" +
    "\uffb0\063\uffb0\001\002\000\004\034\163\001\002\000\024" +
    "\004\015\006\037\010\004\020\017\027\043\030\042\034" +
    "\034\051\032\076\030\001\002\000\004\034\160\001\002" +
    "\000\072\002\uffaa\007\uffaa\011\uffaa\012\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\031\uffaa\037\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\056\uffaa\057\uffaa\060\uffaa\062\uffaa\063\uffaa" +
    "\072\uffaa\073\uffaa\074\uffaa\001\002\000\004\044\162\001" +
    "\002\000\072\002\uffab\007\uffab\011\uffab\012\uffab\013\uffab" +
    "\014\uffab\015\uffab\016\uffab\017\uffab\021\uffab\022\uffab\023" +
    "\uffab\024\uffab\025\uffab\026\uffab\031\uffab\037\uffab\042\uffab" +
    "\043\uffab\044\uffab\056\uffab\057\uffab\060\uffab\062\uffab\063" +
    "\uffab\072\uffab\073\uffab\074\uffab\001\002\000\072\002\uffa9" +
    "\007\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016" +
    "\uffa9\017\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\031\uffa9\037\uffa9\042\uffa9\043\uffa9\044\uffa9\056" +
    "\uffa9\057\uffa9\060\uffa9\062\uffa9\063\uffa9\072\uffa9\073\uffa9" +
    "\074\uffa9\001\002\000\074\002\uffa7\007\uffa7\011\uffa7\012" +
    "\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\021\uffa7" +
    "\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\031\uffa7\037" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\056\uffa7\057\uffa7\060\uffa7" +
    "\062\uffa7\063\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\001" +
    "\002\000\004\030\166\001\002\000\024\005\115\031\171" +
    "\034\114\045\113\046\127\047\122\052\117\053\121\054" +
    "\125\001\002\000\006\031\200\037\177\001\002\000\006" +
    "\034\175\040\174\001\002\000\004\041\006\001\002\000" +
    "\006\031\ufff4\037\ufff4\001\002\000\006\007\ufff6\032\ufff6" +
    "\001\002\000\004\034\176\001\002\000\006\031\ufff3\037" +
    "\ufff3\001\002\000\006\031\ufff2\037\ufff2\001\002\000\022" +
    "\005\115\034\114\045\113\046\127\047\122\052\117\053" +
    "\121\054\125\001\002\000\004\041\006\001\002\000\006" +
    "\007\ufff7\032\ufff7\001\002\000\006\031\ufff5\037\ufff5\001" +
    "\002\000\004\062\204\001\002\000\050\004\015\006\037" +
    "\010\004\020\017\027\043\030\042\034\034\041\006\051" +
    "\032\055\023\061\046\063\205\064\045\065\014\066\044" +
    "\067\027\070\013\071\022\076\030\001\002\000\016\002" +
    "\uffcc\007\uffcc\042\uffcc\056\uffcc\060\uffcc\063\uffcc\001\002" +
    "\000\006\007\210\063\207\001\002\000\016\002\uffcb\007" +
    "\uffcb\042\uffcb\056\uffcb\060\uffcb\063\uffcb\001\002\000\046" +
    "\004\015\006\037\010\004\020\017\027\043\030\042\034" +
    "\034\041\006\051\032\055\023\061\046\064\045\065\014" +
    "\066\044\067\027\070\013\071\022\076\030\001\002\000" +
    "\016\002\uffe0\007\uffe0\042\uffe0\056\uffe0\060\uffe0\063\uffe0" +
    "\001\002\000\016\002\uffca\007\uffca\042\uffca\056\uffca\060" +
    "\uffca\063\uffca\001\002\000\072\002\uffae\007\uffae\011\uffae" +
    "\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\021" +
    "\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\031\uffae" +
    "\037\uffae\042\uffae\043\156\044\uffae\056\uffae\057\uffae\060" +
    "\uffae\062\uffae\063\uffae\072\155\073\uffae\074\157\001\002" +
    "\000\004\031\215\001\002\000\074\002\uff9f\007\uff9f\011" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f" +
    "\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\031" +
    "\uff9f\037\uff9f\042\uff9f\043\uff9f\044\uff9f\056\uff9f\057\uff9f" +
    "\060\uff9f\062\uff9f\063\uff9f\072\uff9f\073\uff9f\074\uff9f\075" +
    "\uff9f\001\002\000\016\002\uffc7\007\uffc7\042\uffc7\056\uffc7" +
    "\060\uffc7\063\uffc7\001\002\000\004\057\220\001\002\000" +
    "\052\004\015\006\037\010\004\020\017\027\043\030\042" +
    "\034\034\041\006\051\032\055\023\056\223\060\222\061" +
    "\046\064\045\065\014\066\044\067\027\070\013\071\022" +
    "\076\030\001\002\000\010\007\210\056\227\060\230\001" +
    "\002\000\016\002\uffd2\007\uffd2\042\uffd2\056\uffd2\060\uffd2" +
    "\063\uffd2\001\002\000\050\004\015\006\037\010\004\020" +
    "\017\027\043\030\042\034\034\041\006\051\032\055\023" +
    "\060\225\061\046\064\045\065\014\066\044\067\027\070" +
    "\013\071\022\076\030\001\002\000\006\007\210\060\226" +
    "\001\002\000\016\002\uffd0\007\uffd0\042\uffd0\056\uffd0\060" +
    "\uffd0\063\uffd0\001\002\000\016\002\uffce\007\uffce\042\uffce" +
    "\056\uffce\060\uffce\063\uffce\001\002\000\050\004\015\006" +
    "\037\010\004\020\017\027\043\030\042\034\034\041\006" +
    "\051\032\055\023\060\232\061\046\064\045\065\014\066" +
    "\044\067\027\070\013\071\022\076\030\001\002\000\016" +
    "\002\uffd1\007\uffd1\042\uffd1\056\uffd1\060\uffd1\063\uffd1\001" +
    "\002\000\006\007\210\060\233\001\002\000\016\002\uffcf" +
    "\007\uffcf\042\uffcf\056\uffcf\060\uffcf\063\uffcf\001\002\000" +
    "\016\002\uffcd\007\uffcd\042\uffcd\056\uffcd\060\uffcd\063\uffcd" +
    "\001\002\000\004\030\235\001\002\000\026\004\015\006" +
    "\037\010\004\020\017\027\043\030\042\031\236\034\034" +
    "\051\032\076\030\001\002\000\016\002\uffc4\007\uffc4\042" +
    "\uffc4\056\uffc4\060\uffc4\063\uffc4\001\002\000\006\031\uffc2" +
    "\037\uffc2\001\002\000\006\031\243\037\242\001\002\000" +
    "\006\031\uffc1\037\uffc1\001\002\000\024\004\015\006\037" +
    "\010\004\020\017\027\043\030\042\034\034\051\032\076" +
    "\030\001\002\000\016\002\uffc5\007\uffc5\042\uffc5\056\uffc5" +
    "\060\uffc5\063\uffc5\001\002\000\006\031\uffc3\037\uffc3\001" +
    "\002\000\004\034\246\001\002\000\006\007\ufff8\032\ufff8" +
    "\001\002\000\046\004\015\006\037\010\004\020\017\027" +
    "\043\030\042\034\034\041\006\051\032\055\023\061\046" +
    "\064\045\065\014\066\044\067\027\070\013\071\022\076" +
    "\030\001\002\000\010\033\062\035\021\036\051\001\002" +
    "\000\006\007\ufffe\032\ufffe\001\002\000\010\002\001\007" +
    "\210\042\001\001\002\000\064\002\uffad\007\uffad\011\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\021" +
    "\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\031\uffad" +
    "\037\uffad\042\uffad\044\uffad\056\uffad\057\uffad\060\uffad\062" +
    "\uffad\063\uffad\073\uffad\001\002\000\016\002\uffc9\007\uffc9" +
    "\042\uffc9\056\uffc9\060\uffc9\063\uffc9\001\002\000\016\002" +
    "\uffc6\007\uffc6\042\uffc6\056\uffc6\060\uffc6\063\uffc6\001\002" +
    "\000\004\042\260\001\002\000\020\002\ufff0\007\ufff0\032" +
    "\ufff0\042\ufff0\056\ufff0\060\ufff0\063\ufff0\001\002\000\020" +
    "\002\ufff1\007\ufff1\032\ufff1\042\ufff1\056\ufff1\060\ufff1\063" +
    "\ufff1\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\072\002\004\003\017\004\015\005\030\006" +
    "\007\007\023\021\037\022\046\023\032\024\010\025\035" +
    "\026\040\027\011\030\024\031\034\032\047\033\025\034" +
    "\051\037\006\040\057\041\062\042\060\043\056\044\055" +
    "\045\054\046\053\047\052\050\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\072\002\255\003\017\004\015" +
    "\005\030\006\007\007\023\021\037\022\046\023\032\024" +
    "\010\025\035\026\040\027\011\030\024\031\034\032\047" +
    "\033\025\034\051\037\006\040\057\041\062\042\060\043" +
    "\056\044\055\045\054\046\053\047\052\050\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\041\062\042\060\043\056\044\055" +
    "\045\054\046\053\047\052\050\254\001\001\000\022\041" +
    "\062\042\060\043\056\044\055\045\054\046\053\047\052" +
    "\050\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\044\252\045\054\046\053\047\052\001\001\000\002" +
    "\001\001\000\014\012\115\013\122\014\123\017\117\020" +
    "\244\001\001\000\002\001\001\000\022\041\062\042\060" +
    "\043\056\044\055\045\054\046\053\047\052\050\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\041\062\042\060\043\056\044\055\045\054\046" +
    "\053\047\052\050\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\041\062\042" +
    "\060\043\056\044\055\045\054\046\053\047\052\050\213" +
    "\001\001\000\010\045\212\046\053\047\052\001\001\000" +
    "\002\001\001\000\022\041\062\042\060\043\056\044\055" +
    "\045\054\046\053\047\052\050\211\001\001\000\022\041" +
    "\062\042\060\043\056\044\055\045\054\046\053\047\052" +
    "\050\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\115" +
    "\013\122\014\123\017\117\020\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\041\062\042\060\043\056" +
    "\044\055\045\054\046\053\047\052\050\065\001\001\000" +
    "\002\001\001\000\022\041\062\042\060\043\056\044\055" +
    "\045\054\046\053\047\052\050\111\001\001\000\016\042" +
    "\110\043\056\044\055\045\054\046\053\047\052\001\001" +
    "\000\020\041\107\042\060\043\056\044\055\045\054\046" +
    "\053\047\052\001\001\000\016\042\072\043\056\044\055" +
    "\045\054\046\053\047\052\001\001\000\002\001\001\000" +
    "\014\043\106\044\055\045\054\046\053\047\052\001\001" +
    "\000\014\043\105\044\055\045\054\046\053\047\052\001" +
    "\001\000\014\043\104\044\055\045\054\046\053\047\052" +
    "\001\001\000\014\043\103\044\055\045\054\046\053\047" +
    "\052\001\001\000\014\043\102\044\055\045\054\046\053" +
    "\047\052\001\001\000\014\043\101\044\055\045\054\046" +
    "\053\047\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\115\013\122\014\123\017\117" +
    "\020\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\115\013\122" +
    "\014\123\015\133\016\132\017\117\020\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\115\013\122\014" +
    "\123\016\140\017\117\020\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\115\013\122\014\123\017\117\020\145\001\001" +
    "\000\002\001\001\000\012\044\153\045\054\046\053\047" +
    "\052\001\001\000\012\044\152\045\054\046\053\047\052" +
    "\001\001\000\012\044\151\045\054\046\053\047\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\041\062\042\060\043\056\044" +
    "\055\045\054\046\053\047\052\050\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\010\166\011\171\012\115\013\122\014\123\017" +
    "\117\020\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\011\201\012\115\013\122\014\123\017\117\020" +
    "\167\001\001\000\004\040\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\021\037\022" +
    "\046\023\032\024\010\025\035\026\205\027\011\030\024" +
    "\031\034\032\047\033\025\034\051\037\006\040\057\041" +
    "\062\042\060\043\056\044\055\045\054\046\053\047\052" +
    "\050\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\021\210\022\046\023\032\024\010" +
    "\025\035\027\011\030\024\031\034\032\047\033\025\034" +
    "\051\037\006\040\057\041\062\042\060\043\056\044\055" +
    "\045\054\046\053\047\052\050\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\021\037\022\046\023\032\024\010\025\035\026\220" +
    "\027\011\030\024\031\034\032\047\033\025\034\051\037" +
    "\006\040\057\041\062\042\060\043\056\044\055\045\054" +
    "\046\053\047\052\050\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\021\037\022\046\023\032\024\010" +
    "\025\035\026\223\027\011\030\024\031\034\032\047\033" +
    "\025\034\051\037\006\040\057\041\062\042\060\043\056" +
    "\044\055\045\054\046\053\047\052\050\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\021\037\022\046\023\032\024\010\025\035\026\230\027" +
    "\011\030\024\031\034\032\047\033\025\034\051\037\006" +
    "\040\057\041\062\042\060\043\056\044\055\045\054\046" +
    "\053\047\052\050\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\035\237\036\236\041\062\042\060\043\056" +
    "\044\055\045\054\046\053\047\052\050\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\036\243\041\062\042\060\043\056\044" +
    "\055\045\054\046\053\047\052\050\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\021\037\022\046\023\032\024\010\025\035" +
    "\026\251\027\011\030\024\031\034\032\047\033\025\034" +
    "\051\037\006\040\057\041\062\042\060\043\056\044\055" +
    "\045\054\046\053\047\052\050\063\001\001\000\012\004" +
    "\250\005\030\006\007\007\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= D0 SEPARADOR I0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= I0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // D0 ::= D0 PCOMA D1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("D0",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // D0 ::= D1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("D0",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // D1 ::= DV0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("D1",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // D1 ::= DT0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("D1",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // D1 ::= DP0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("D1",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DV0 ::= VAR T0 IDENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DV0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DT0 ::= TYPE T0 IDENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DT0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DP0 ::= PROC IDENT PAP PFS0 PCIERRE B0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DP0",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DP0 ::= PROC IDENT PAP PCIERRE B0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DP0",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PFS0 ::= PFS0 COMA PF1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PFS0",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PFS0 ::= PF1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PFS0",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PF1 ::= T0 IDENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PF1",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PF1 ::= T0 AMP IDENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PF1",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // B0 ::= LAP S LCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // B0 ::= LAP LCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // T0 ::= TB0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // T0 ::= IDENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // T0 ::= TA0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // T0 ::= TR0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // T0 ::= TP0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TB0 ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TB0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TB0 ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TB0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TB0 ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TB0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TB0 ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TB0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TA0 ::= ARRAY CAP NUMENT CCIERRE OF T0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TA0",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TR0 ::= RECORD LAP C0 LCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TR0",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // C0 ::= C0 PCOMA C1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("C0",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // C0 ::= C1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("C0",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // C1 ::= T0 IDENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("C1",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TP0 ::= POINTER T0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TP0",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // I0 ::= I0 PCOMA I1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("I0",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // I0 ::= I1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("I0",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // I1 ::= IA0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("I1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // I1 ::= IIT0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("I1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // I1 ::= IITE0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("I1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // I1 ::= IW0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("I1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // I1 ::= IL0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("I1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // I1 ::= IE0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("I1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // I1 ::= INL0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("I1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // I1 ::= IRM0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("I1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // I1 ::= ILM0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("I1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // I1 ::= IIP0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("I1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // I1 ::= IC0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("I1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IA0 ::= E0 IGUAL E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IA0",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IIT0 ::= IF E0 THEN ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IIT0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IIT0 ::= IF E0 THEN I0 ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IIT0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IITE0 ::= IF E0 THEN ELSE ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IITE0",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IITE0 ::= IF E0 THEN I0 ELSE ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IITE0",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IITE0 ::= IF E0 THEN ELSE I0 ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IITE0",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IITE0 ::= IF E0 THEN I0 ELSE I0 ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IITE0",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IW0 ::= WHILE E0 DO ENDWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IW0",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IW0 ::= WHILE E0 DO I0 ENDWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IW0",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IL0 ::= READ E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IL0",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IE0 ::= WRITE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IE0",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INL0 ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INL0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IRM0 ::= NEW E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IRM0",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ILM0 ::= DELETE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ILM0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IIP0 ::= CALL IDENT PAP PR0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IIP0",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IIP0 ::= CALL IDENT PAP PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IIP0",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PR0 ::= PR0 COMA PR1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PR0",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PR0 ::= PR1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PR0",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PR1 ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PR1",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IC0 ::= B0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IC0",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E0 ::= E1 MAS E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E0 ::= E1 MENOS E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E1 ::= E1 AND E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E1 ::= E1 OR E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E2 ::= E2 MENOR E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E2 ::= E2 MENORIGUAL E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E2 ::= E2 MAYOR E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E2 ::= E2 MAYORIGUAL E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E2 ::= E2 EQUIV E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E2 ::= E2 NOEQUIV E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E3 ::= E4 DIV E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E3 ::= E4 POR E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E3 ::= E4 MODULO E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E4 ::= NEG E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E4 ::= NOT E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E5 ::= E5 CAP E0 CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E5 ::= E5 PUNTO IDENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E5 ::= E5 FLECHA IDENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E6 ::= E6 INDIRECCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E7 ::= NUMREAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E7 ::= NUMENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E7 ::= CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E7 ::= IDENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E7 ::= UNIDADBOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E7 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E7 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

